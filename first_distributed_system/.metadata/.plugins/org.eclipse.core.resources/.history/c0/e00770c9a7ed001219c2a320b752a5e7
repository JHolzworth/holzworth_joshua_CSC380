package StartUp;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import Server.ServerApplication;

public class ServerDriver {

	final static int PORT = 5000;
	
	public static void main(String[]args) throws IOException, NoSuchMethodException, SecurityException{
		
		classes.toArray(new Class[classes.size()]);
		ServerApplication server = new ServerApplication(PORT);
		server.start();
		
	}
	
	private static Class[] getClasses(String packageName)
	10.throws ClassNotFoundException, IOException {
	11.ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
	12.assert classLoader != null;
	13.String path = packageName.replace('.', '/');
	14.Enumeration<URL> resources = classLoader.getResources(path);
	15.List<File> dirs = new ArrayList<File>();
	16.while (resources.hasMoreElements()) {
	17.URL resource = resources.nextElement();
	18.dirs.add(new File(resource.getFile()));
	19.}
	20.ArrayList<Class> classes = new ArrayList<Class>();
	21.for (File directory : dirs) {
	22.classes.addAll(findClasses(directory, packageName));
	23.}
	24.return classes.toArray(new Class[classes.size()]);
	25.}
	26. 
	27./**
	28.* Recursive method used to find all classes in a given directory and subdirs.
	29.*
	30.* @param directory   The base directory
	31.* @param packageName The package name for classes found inside the base directory
	32.* @return The classes
	33.* @throws ClassNotFoundException
	34.*/
	35.private static List<Class> findClasses(File directory, String packageName) throws ClassNotFoundException {
	36.List<Class> classes = new ArrayList<Class>();
	37.if (!directory.exists()) {
	38.return classes;
	39.}
	40.File[] files = directory.listFiles();
	41.for (File file : files) {
	42.if (file.isDirectory()) {
	43.assert !file.getName().contains(".");
	44.classes.addAll(findClasses(file, packageName + "." + file.getName()));
	45.} else if (file.getName().endsWith(".class")) {
	46.classes.add(Class.forName(packageName + '.' + file.getName().substring(0, file.getName().length() - 6)));
	47.}
	48.}
	49.return classes;
	50.}
}
