package Controller;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Scanner;

public class ClientProcessor implements Runnable{

	MathLogic logic;
	Socket clientSocket;
	ArrayList<Connectable> listeners = new ArrayList<Connectable>();
	public ClientProcessor(MathLogic _logic, Socket _clientSocket){
		logic = _logic;
		clientSocket = _clientSocket;
		setUpMethodTable();
	}
	
	public void addListener(Connectable toAdd){
		listeners.add(toAdd);
	}
	
	public void removeListener(Connectable toRemove){
		listeners.remove(toRemove);
	}
	
	
	public void connect(){
		for(Connectable c : listeners){
			c.connect();
		}
	}
	
	public void request(String request){
		for(Connectable c : listeners){
			c.request(request);
		}
	}
	public void response(String response){
		for(Connectable c : listeners){
			c.response(response);
		}
	}
	
	public void disconnect(){
		for(Connectable c : listeners){
			c.disconnect();
		}
	}
	

	public String obtainClientOptions(){
		Method[] logicMethods = MathLogic.class.getDeclaredMethods();
		String options = "";
		
		Enumeration<String> methods = lookUpTable.keys();
		
		while(methods.hasMoreElements()){
			String nextMethod = methods.nextElement();
			
			Class[] params = lookUpTable.get(nextMethod);
			options+=nextMethod;
			for(Class nextParam : params){
				options+=" "+nextParam.getName();
			}
		}
		
		for(int i=0;i<logicMethods.length;i++){
			options+=logicMethods[i].getName()+"|";
		}
		return options;
	}
	
	
	Hashtable<String,Class[]> lookUpTable = new Hashtable<String,Class[]>();
	
	private void setUpMethodTable(){
		Method[] allMethods = MathLogic.class.getDeclaredMethods();
		for(int i=0;i<allMethods.length;i++){
			lookUpTable.put(allMethods[i].getName(),allMethods[i].getParameterTypes());
		}
	}
	
	public void obtainMethodInformation() throws IOException, NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException{
		InputStream clientInput = clientSocket.getInputStream();
		Scanner inputReader = new Scanner(clientInput);
		
		String request = inputReader.nextLine();
		
		Class[] paramTypes = lookUpTable.get(request);
		Method chosenMethod = MathLogic.class.getMethod(request,paramTypes);
		
		for(int i=0;i<paramTypes.length;i++){
			System.out.println(paramTypes[i].getName());
		}
		
		ArrayList<Object> paramObjs = new ArrayList<Object>();
		String nextParam = inputReader.next();
		
		
		//Singleton for this!
		
		
		Object[] userParams = new Object[paramTypes.length];
		for(int i=0;i<paramTypes.length;i++){
			Method cast = paramTypes[i].getMethod("valueOf", String.class);
			userParams[i] = cast.invoke(null, inputReader.nextLine());
		}
		
		Class returnType = chosenMethod.getReturnType();
		
		System.out.println(returnType.cast(chosenMethod.invoke(logic, userParams)));
	}
	
	
	public void run() {
		connect();
		try {

			//Sends options
			OutputStream clientOutput = clientSocket.getOutputStream();
			PrintWriter clientWriter = new PrintWriter(clientOutput);
			clientWriter.println(obtainClientOptions());
			clientWriter.flush();

			
			//request
			obtainMethodInformation();
			
			/* Not what was wanted...
			String request = requestedMethod;
			ArrayList<Integer> numbers = new ArrayList<Integer>();
			while(inputReader.hasNext()){
				String nextNumber = inputReader.next();
				request+=" "+nextNumber;
				numbers.add(Integer.parseInt(nextNumber));
			}
			request(request);
			
			int[] realNumbers = new int[numbers.size()];
			for(int i=0;i<numbers.size();i++){
				realNumbers[i] = numbers.get(i);
			}
			
			Method method = logic.getClass().getMethod(requestedMethod, int[].class);
			int value = (int)method.invoke(logic, realNumbers);
			*/
			
			//Return...
			String response = "Value ";//+value;
			clientWriter.println(response+"\n");
			clientWriter.flush();
			clientSocket.close();
			response(response);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		disconnect();
	}

}
